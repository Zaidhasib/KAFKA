import com.google.common.collect.Lists;
import com.twitter.hbc.ClientBuilder;
import com.twitter.hbc.core.Client;
import com.twitter.hbc.core.Constants;
import com.twitter.hbc.core.Hosts;
import com.twitter.hbc.core.HttpHosts;
import com.twitter.hbc.core.endpoint.StatusesFilterEndpoint;
import com.twitter.hbc.core.event.Event;
import com.twitter.hbc.core.processor.StringDelimitedProcessor;
import com.twitter.hbc.httpclient.auth.Authentication;
import com.twitter.hbc.httpclient.auth.OAuth1;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.StringSerializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Properties;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

public class TwitterProducer {
    String consumerKey="777gnaS2a73IYDBS3FbjZdgsp";
    String consumerSecret="stT0pm09nYyVz6NHlfAHPnDAL13BAU0rqMrbihRxYOCvEvaaR5";
    String  token="838810542965837824-ewlHRylGrsO50FkKAhpeNTs5SE2O5yX";
    String secret="eAxyivL5CvikIv3CLosFuZUFmmIh75xpmaU05qnund4nr";
    Logger logger;

    List<String> terms = Lists.newArrayList("anime","one piece","luffy","zoro"); 

    {
        logger = LoggerFactory.getLogger(TwitterProducer.class.getName());
    }

    public TwitterProducer(){}




    public static void main(String[] args) {
        new TwitterProducer().run();

    }

        public void run() {
        logger.info("set up");
            /** Set up your blocking queues: Be sure to size these properly based on expected TPS of your stream */
            BlockingQueue<String> msgQueue = new LinkedBlockingQueue<String>(1000);

            //create kafka cient
            Client client = createTwitterClient(msgQueue);//from where the record is coming
            // Attempts to establish a connection.
            client.connect();


            //create kafka producer
            KafkaProducer<String,String> producer =createKafkaProducer(); 

            //loop to send tweets to kafka

            while (!client.isDone()) {
                String msg = null;
                try {
                    msg = msgQueue.poll(5, TimeUnit.SECONDS);//polling the records from the kafka
                } catch (InterruptedException e) {
                    e.printStackTrace();
                    client.stop();
                }
                if(msg!=null){
                    logger.info(msg);
                    producer.send(new ProducerRecord<String, String>("twitter_tweets",null,msg), (recordMetadata, e) -> {
                        if (e!=null){
                            logger.info("Some error has occured",e);
                        }
                    }) ;
                }

            }
            logger.info("end  of application");
    }

    public KafkaProducer<String, String> createKafkaProducer() {
        Properties properties = new Properties();
        properties.setProperty(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "127.0.0.1:9092");
        properties.setProperty(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        properties.setProperty(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());

        //Create safe producer
        properties.setProperty(ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG,"true");
        properties.setProperty(ProducerConfig.ACKS_CONFIG,"all");
        properties.setProperty(ProducerConfig.RETRIES_CONFIG, String.valueOf(Integer.MAX_VALUE));
        properties.setProperty(ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION,"5");//for kafka version more than 2.0 we can keep it upto 5


        //high throughput producer at thr expense of bit of latency and cpu usage
        properties.setProperty(ProducerConfig.COMPRESSION_TYPE_CONFIG,"snappy");
        properties.setProperty(ProducerConfig.LINGER_MS_CONFIG,"20");
        properties.setProperty(ProducerConfig.BATCH_SIZE_CONFIG, String.valueOf((32*1024)));



        return (KafkaProducer) new KafkaProducer<Object, Object>(properties);

    }




    public Client createTwitterClient(BlockingQueue<String> msgQueue ){


        /** Declare the host you want to connect to, the endpoint, and authentication (basic auth or oauth) */
        Hosts hosebirdHosts = new HttpHosts(Constants.STREAM_HOST);
        StatusesFilterEndpoint hosebirdEndpoint = new StatusesFilterEndpoint();
// Optional: set up some followings and track terms
       // List<Long> followings = Lists.newArrayList(1234L, 566788L);

       // hosebirdEndpoint.followings(followings);
        hosebirdEndpoint.trackTerms(terms);

// These secrets should be read from a config file
        Authentication hosebirdAuth = new OAuth1(consumerKey, consumerSecret, token, secret);


        BlockingQueue<Event> eventQueue;
        ClientBuilder builder = new ClientBuilder()
                .name("Hosebird-Client-01")                              // optional: mainly for the logs
                .hosts(hosebirdHosts)
                .authentication(hosebirdAuth)
                .endpoint(hosebirdEndpoint)
                .processor(new StringDelimitedProcessor(msgQueue));
                //.eventMessageQueue(eventQueue);                          // optional: use this if you want to process client events

               Client hosebirdClient = builder.build();
               return hosebirdClient;

    }
    }

